     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, scanf, printf, fprintf
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  
    15                                  segment data use32 class=data
    16                                      ;nume_fisier db "string.txt", 0
    17 00000000 7700                        mod_acces db "w", 0
    18 00000002 FFFFFFFF                    descriptor dd -1
    19                                      
    20 00000006 00<rept>                    string times 100 db 0
    21 0000006A 00000000                    len dd 0
    22                                      
    23 0000006E 257300                      format_str db "%s", 0
    24 00000071 256300                      format_car db "%c", 0
    25                                      
    26 00000074 446573636869646572-         eroare db "Deschiderea fisierului a esuat", 0
    26 0000007D 656120666973696572-
    26 00000086 756C75692061206573-
    26 0000008F 75617400           
    27                                  
    28                                  ; 8. Citesc string tastatura, creem fisier string.txt, adaugam in fisier prima data majusculele apoi minusculele invers de cum apar in sir.
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; scanf(format_str, string)
    32 00000000 68[06000000]                    push dword string
    33 00000005 68[6E000000]                    push dword format_str
    34 0000000A FF15[00000000]                  call [scanf]
    35 00000010 83C408                          add esp, 4*2
    36                                          
    37 00000013 BE00000000                      mov esi, 0
    38                                          bucla:
    39 00000018 80BE[06000000]00                    cmp byte [string + esi], 0
    40 0000001F 7403                                je adauga
    41                                              
    42 00000021 46                                  inc esi
    43 00000022 EBF4                                jmp bucla
    44                                              
    45                                          
    46                                          
    47                                          adauga:
    48 00000024 B82E747874                          mov eax, ".txt"
    49 00000029 8986[06000000]                      mov [string + esi], eax
    50                                              
    51 0000002F 8935[6A000000]                  mov [len], esi
    52                                                     
    53                                      
    54                                          ; fopen(nume_fisier, mod_acces)
    55 00000035 68[00000000]                    push dword mod_acces
    56 0000003A 68[06000000]                    push dword string
    57 0000003F FF15[00000000]                  call [fopen]
    58 00000045 83C408                          add esp, 4*2
    59                                          
    60 00000048 83F800                          cmp eax, 0
    61 0000004B 0F8485000000                    je eroare_deschidere
    62                                          
    63 00000051 A3[02000000]                    mov [descriptor], eax
    64                                          
    65 00000056 FC                              cld
    66 00000057 8B0D[6A000000]                  mov ecx, [len]
    67 0000005D BE[06000000]                    mov esi, string
    68                                          repeta:
    69 00000062 51                                  push ecx
    70                                              
    71 00000063 B800000000                              mov eax, 0
    72 00000068 8A81[05000000]                          mov al, byte [string + ecx - 1]
    73 0000006E 3C41                                    cmp al, 'A'
    74 00000070 7C19                                    jl .next
    75                                                  
    76 00000072 3C5A                                    cmp al, 'Z'
    77 00000074 7F15                                    jg .next
    78                                                  
    79                                                  ; printf(descriptor, format_car, eax)
    80 00000076 50                                      push dword eax
    81 00000077 68[71000000]                            push dword format_car
    82 0000007C FF35[02000000]                          push dword [descriptor]
    83 00000082 FF15[00000000]                          call [fprintf]
    84 00000088 83C40C                                  add esp, 4*3
    85                                                  
    86                                                  .next:
    87                                              
    88 0000008B 59                                  pop ecx
    89 0000008C E2D4                            loop repeta
    90                                          
    91 0000008E 8B0D[6A000000]                  mov ecx, [len]
    92 00000094 BE[06000000]                    mov esi, string
    93                                          repeta2:
    94 00000099 51                                  push ecx
    95                                              
    96 0000009A B800000000                              mov eax, 0
    97 0000009F 8A81[05000000]                          mov al, byte [string + ecx - 1]
    98 000000A5 3C61                                    cmp al, 'a'
    99 000000A7 7C19                                    jl .next
   100                                                  
   101 000000A9 3C7A                                    cmp al, 'z'
   102 000000AB 7F15                                    jg .next
   103                                                  
   104                                                  ; printf(descriptor, format_car, eax)
   105 000000AD 50                                      push dword eax
   106 000000AE 68[71000000]                            push dword format_car
   107 000000B3 FF35[02000000]                          push dword [descriptor]
   108 000000B9 FF15[00000000]                          call [fprintf]
   109 000000BF 83C40C                                  add esp, 4*3
   110                                                  
   111                                                  .next:
   112                                              
   113 000000C2 59                                  pop ecx
   114 000000C3 E2D4                            loop repeta2
   115                                          
   116                                          ; fclose(descriptor)
   117 000000C5 FF35[02000000]                  push dword [descriptor]
   118 000000CB FF15[00000000]                  call [fclose]
   119 000000D1 83C404                          add esp, 4
   120                                          
   121 000000D4 EB0E                            jmp final
   122                                          eroare_deschidere:
   123 000000D6 68[74000000]                        push dword eroare
   124 000000DB FF15[00000000]                      call [printf]
   125 000000E1 83C404                              add esp, 4
   126                                          final:
   127                                          ; exit(0)
   128 000000E4 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   129 000000E6 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
