     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  
     7                                  extern exit, fopen, fclose, printf, fscanf
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import fscanf msvcrt.dll
    13                                    
    14                                  segment data use32 class=data
    15 00000000 6669736965722E7478-         nume_fisier db "fisier.txt", 0
    15 00000009 7400               
    16 0000000B 7200                        mod_acces db "r", 0
    17 0000000D FFFFFFFF                    descriptor dd -1
    18                                      
    19 00000011 00000000                    numar dd 0
    20                                      
    21 00000015 256400                      format_cit db "%d", 0
    22 00000018 256400                      format_afis db "%d", 0
    23                                      
    24 0000001B 446573636869646572-         eroare db "Deschiderea fisierului a esuat", 0
    24 00000024 656120666973696572-
    24 0000002D 756C75692061206573-
    24 00000036 75617400           
    25                                  
    26                                  ; 16. Se citesc nr din fisier, sa se faca suma nr mai mici decat 8 si sa se afiseze pe ecran.
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; fopen(nume_fisier, mod_acces)
    30 00000000 68[0B000000]                    push dword mod_acces
    31 00000005 68[00000000]                    push dword nume_fisier
    32 0000000A FF15[00000000]                  call [fopen]
    33 00000010 83C408                          add esp, 4*2
    34                                          
    35 00000013 83F800                          cmp eax, 0
    36 00000016 7456                            je eroare_deschidere
    37                                          
    38 00000018 A3[0D000000]                    mov [descriptor], eax
    39                                          
    40 0000001D BB00000000                      mov ebx, 0
    41                                          repeta:
    42                                              ; fscanf(descriptor, format_cit, numar)
    43 00000022 68[11000000]                        push dword numar
    44 00000027 68[15000000]                        push dword format_cit
    45 0000002C FF35[0D000000]                      push dword [descriptor]
    46 00000032 FF15[00000000]                      call [fscanf]
    47 00000038 83C40C                              add esp, 4*3
    48                                              
    49 0000003B 83F801                              cmp eax, 1
    50 0000003E 750E                                jne afisare
    51                                              
    52 00000040 A1[11000000]                        mov eax, [numar]
    53 00000045 83F808                              cmp eax, 8
    54 00000048 7D02                                jge next
    55                                              
    56 0000004A 01C3                                add ebx, eax
    57                                              
    58                                              next:
    59 0000004C EBD4                                    jmp repeta
    60                                              
    61                                          afisare:
    62                                              ; printf(format_afis, ebx)
    63 0000004E 53                                  push ebx
    64 0000004F 68[18000000]                        push dword format_afis
    65 00000054 FF15[00000000]                      call [printf]
    66 0000005A 83C408                              add esp, 4*2
    67                                          
    68                                          ; fclose(descriptor)
    69 0000005D FF35[0D000000]                  push dword [descriptor]
    70 00000063 FF15[00000000]                  call [fclose]
    71 00000069 83C404                          add esp, 4
    72                                          
    73 0000006C EB0E                            jmp final
    74                                          eroare_deschidere:
    75 0000006E 68[1B000000]                        push dword eroare
    76 00000073 FF15[00000000]                      call [printf]
    77 00000079 83C404                              add esp, 4
    78                                          final:
    79                                          ; exit(0)
    80 0000007C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    81 0000007E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
