     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  
    12                                  segment data use32 class=data
    13 00000000 00000000                    numar dd 0
    14 00000004 00<rept>                    cuvant times 20 db 0
    15 00000018 00<rept>                    cuvant_nou times 60 db 0
    16                                      
    17 00000054 257300                      format_cuv db "%s", 0
    18 00000057 256400                      format_numar db "%d", 0
    19                                      
    20 0000005A 6165696F754165696F-         vocale db "aeiouAeiou", 0
    20 00000063 7500               
    21                                      
    22                                  
    23                                  ; Se citeste de la tastatura un cuvant si un numar. Daca numarul este par se cere criptarea cuvantului prin adunarea la fiecare caracter a numarului 20. Daca numarul este impar se cere criptarea cuvantului prin adau
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; scanf(format_cuv, cuvant)
    27 00000000 68[04000000]                    push dword cuvant
    28 00000005 68[54000000]                    push dword format_cuv
    29 0000000A FF15[00000000]                  call [scanf]
    30 00000010 83C408                          add esp, 4*2
    31                                          
    32                                          ; scanf(format_numar, numar)
    33 00000013 68[00000000]                    push dword numar
    34 00000018 68[57000000]                    push dword format_numar
    35 0000001D FF15[00000000]                  call [scanf]
    36 00000023 83C408                          add esp, 4*2
    37                                          
    38 00000026 8B1D[00000000]                  mov ebx, [numar]
    39 0000002C F7C301000000                    test ebx, 0001h
    40 00000032 7440                            jz par
    41                                          
    42                                          impar:
    43 00000034 BE00000000                          mov esi, 0
    44 00000039 BB00000000                          mov ebx, 0
    45                                              bucla:
    46 0000003E 8A86[04000000]                          mov al, byte [cuvant + esi]
    47 00000044 3C00                                    cmp al, 0
    48 00000046 7458                                    je gata_impar
    49                                                  
    50 00000048 8883[18000000]                          mov [cuvant_nou + ebx], al
    51 0000004E 43                                      inc ebx ; punem litera in noul cuvant
    52                                                  
    53 0000004F FC                                      cld
    54 00000050 BF[5A000000]                            mov edi, vocale
    55 00000055 B90A000000                              mov ecx, 10
    56                                                  cauta:
    57 0000005A AE                                          scasb
    58 0000005B 7404                                        je gasit
    59 0000005D E2FB                                    loop cauta
    60                                                  
    61 0000005F EB10                                    jmp next
    62                                                  gasit:
    63 00000061 B170                                        mov cl, 'p'
    64 00000063 888B[18000000]                              mov [cuvant_nou + ebx], cl
    65 00000069 43                                          inc ebx ; punem litera in noul cuvant
    66                                                      
    67 0000006A 8883[18000000]                              mov [cuvant_nou + ebx], al
    68 00000070 43                                          inc ebx ; punem litera in noul cuvant
    69                                                      
    70                                                  next:
    71 00000071 46                                          inc esi
    72 00000072 EBCA                                        jmp bucla
    73                                          par:
    74 00000074 BE00000000                          mov esi, 0
    75                                              repeta:
    76 00000079 8A86[04000000]                          mov al, byte [cuvant + esi]
    77 0000007F 3C00                                    cmp al, 0
    78 00000081 740B                                    je gata_par
    79                                                  
    80 00000083 0414                                    add al, 20
    81 00000085 8886[04000000]                          mov byte [cuvant + esi], al
    82                                                  
    83 0000008B 46                                      inc esi
    84 0000008C EBEB                                    jmp repeta
    85                                                  
    86                                          gata_par:
    87                                          
    88                                          ; printf(format_cuv, cuvant)
    89 0000008E 68[04000000]                    push dword cuvant
    90 00000093 68[54000000]                    push dword format_cuv
    91 00000098 FF15[00000000]                  call [printf]
    92                                          
    93 0000009E EB10                            jmp final
    94                                          gata_impar:
    95                                          ; printf(format_cuv, cuvant_nou)
    96 000000A0 68[18000000]                    push dword cuvant_nou
    97 000000A5 68[54000000]                    push dword format_cuv
    98 000000AA FF15[00000000]                  call [printf]
    99                                          
   100                                          final:
   101                                          ; exit(0)
   102 000000B0 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   103 000000B2 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
