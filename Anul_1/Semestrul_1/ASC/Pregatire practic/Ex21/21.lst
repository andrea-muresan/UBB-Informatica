     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, printf, fscanf, scanf, getchar
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fscanf msvcrt.dll
    14                                  import getchar msvcrt.dll
    15                                  
    16                                  segment data use32 class=data
    17 00000000 00<rept>                    nume_fisier times 15 db 0
    18 0000000F 7200                        mod_acces db "r", 0
    19 00000011 FFFFFFFF                    descriptor dd -1
    20                                      
    21 00000015 00<rept>                    cuvant times 20 db 0
    22 00000029 00000000                    numar dd 0
    23                                      
    24 0000002D 257300                      format_string db "%s", 0
    25 00000030 256400                      format_numar db "%d", 0
    26 00000033 25732000                    format_afis db "%s ", 0
    27                                      
    28 00000037 446573636869646572-         eroare db "Deschiderea fisierului a esuat", 0
    28 00000040 656120666973696572-
    28 00000049 756C75692061206573-
    28 00000052 75617400           
    29                                  
    30                                  ; 21.	Sa se citeasca de la tastatura un nume de fisier si un numar. 
    31                                  ; Sa se citeasca din fisierul dat cuvintele separate prin spatii si sa se afiseze in consola cuvintele care sunt pe pozitiile multipli de numarul citit de la tastatura.
    32                                  
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; scanf(format_string, nume_fisier)
    36 00000000 68[00000000]                    push dword nume_fisier
    37 00000005 68[2D000000]                    push dword format_string
    38 0000000A FF15[00000000]                  call [scanf]
    39 00000010 83C408                          add esp, 4*2
    40                                          
    41                                          ; call [getchar]
    42                                          
    43                                          ; fopen(nume_fisier, mod_acces)
    44 00000013 68[0F000000]                    push dword mod_acces
    45 00000018 68[00000000]                    push dword nume_fisier
    46 0000001D FF15[00000000]                  call [fopen]
    47 00000023 83C408                          add esp, 4*2
    48                                          
    49 00000026 83F800                          cmp eax, 0
    50 00000029 746F                            je eroare_deschidere
    51                                          
    52 0000002B A3[11000000]                    mov [descriptor], eax
    53                                          
    54                                          ; scanf(format_string, nume_fisier)
    55 00000030 68[29000000]                    push dword numar
    56 00000035 68[30000000]                    push dword format_numar
    57 0000003A FF15[00000000]                  call [scanf]
    58 00000040 83C408                          add esp, 4*2
    59                                          
    60 00000043 BE01000000                      mov esi, 1
    61                                          repeta:
    62                                              ; fscanf(descriptor, format_string, cuvant)
    63 00000048 68[15000000]                        push dword cuvant
    64 0000004D 68[2D000000]                        push dword format_string
    65 00000052 FF35[11000000]                      push dword [descriptor]
    66 00000058 FF15[00000000]                      call [fscanf]
    67 0000005E 83C40C                              add esp, 4*3
    68                                              
    69 00000061 83F801                              cmp eax, 1
    70 00000064 7523                                jne afara
    71                                              
    72 00000066 89F0                                mov eax, esi
    73 00000068 F635[29000000]                      div byte [numar]
    74                                              
    75 0000006E 80FC00                              cmp ah, 0
    76 00000071 7513                                jne next
    77                                              
    78                                              ; printf(format_afis, cuvant)
    79 00000073 68[15000000]                        push dword cuvant
    80 00000078 68[33000000]                        push dword format_afis
    81 0000007D FF15[00000000]                      call [printf]
    82 00000083 83C408                              add esp, 4*2
    83                                              
    84                                              next:
    85 00000086 46                                      inc esi
    86 00000087 EBBF                                    jmp repeta
    87                                          afara:
    88                                          
    89                                          
    90                                              
    91                                          
    92                                          ; fclose(descriptor)
    93 00000089 FF35[11000000]                  push dword [descriptor]
    94 0000008F FF15[00000000]                  call [fclose]
    95 00000095 83C404                          add esp, 4
    96                                          
    97 00000098 EB0E                            jmp final
    98                                          eroare_deschidere:
    99 0000009A 68[37000000]                        push dword eroare
   100 0000009F FF15[00000000]                      call [printf]
   101 000000A5 83C404                              add esp, 4
   102                                          final:
   103                                          ; exit(0)
   104 000000A8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   105 000000AA FF15[00000000]                  call    [exit]       ; call exit to terminate the program
