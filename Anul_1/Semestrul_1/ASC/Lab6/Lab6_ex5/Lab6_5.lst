     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 072137132E                  s1 db 7, 33, 55, 19, 46
    14                                      l_s1 equ $-s1
    15 00000005 2115070D1B1337012E          s2 db 33, 21, 7, 13, 27, 19, 55, 1, 46 
    16                                      len equ $-s2
    17 0000000E 00<rept>                    d times len db 0
    18                                  
    19                                  ;5. Se dau doua siruri de octeti s1 si s2. Sa se construiasca sirul de octeti d, care contine pentru fiecare octet din s2 pozitia sa in s1, sau 0 in caz contrar.
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 B909000000                      mov ecx, len
    23 00000005 E32F                            jecxz final
    24                                          
    25 00000007 FC                              cld
    26 00000008 BE[05000000]                    mov esi, s2
    27 0000000D BF[0E000000]                    mov edi, d
    28                                          
    29                                          repeta:
    30 00000012 51                                  push ecx
    31 00000013 AC                                  lodsb
    32 00000014 B905000000                          mov ecx, l_s1  
    33 00000019 BB00000000                          mov ebx, 0
    34                                              cauta:
    35 0000001E 3883[00000000]                          cmp [s1 + ebx], al
    36 00000024 7408                                    je gasit
    37 00000026 43                                      inc ebx
    38 00000027 E2F5                                loop cauta
    39                                              
    40                                              negasit:
    41 00000029 B000                                    mov al, 0
    42 0000002B AA                                      stosb
    43 0000002C EB05                                    jmp gata
    44                                              gasit:
    45 0000002E 88D8                                    mov al, bl
    46 00000030 FEC0                                    inc al
    47 00000032 AA                                      stosb
    48                                              gata:
    49 00000033 59                                      pop ecx
    50                                  
    51 00000034 E2DC                            loop repeta
    52                                          
    53                                          final:
    54                                          ; exit(0)
    55 00000036 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000038 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
