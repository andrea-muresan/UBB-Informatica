     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 78563412CDAB561244-         sir DD 12345678h, 1256ABCDh, 12AB4344h
    13 00000009 43AB12             
    14                                      len equ ($-sir)/4
    15 0000000C 00000000<rept>              d times len dd 0
    16                                  
    17                                  ; 17. Se da un sir de dublucuvinte. Sa se ordoneze descrescator sirul cuvintelor inferioare ale acestor dublucuvinte. Cuvintele superioare raman neschimbate.
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 B903000000                      mov ecx, len
    21 00000005 E369                            jecxz final
    22                                          ; punem cuvintele inferioare in sirul d
    23 00000007 FC                              cld
    24 00000008 BE[00000000]                    mov esi, sir
    25 0000000D BF[0C000000]                    mov edi, d
    26                                          repeta:
    27 00000012 66A5                                movsw
    28 00000014 66AD                                lodsw
    29 00000016 E2FA                            loop repeta
    30                                          
    31                                          ; sortare d
    32 00000018 B902000000                      mov ecx, len - 1
    33                                          do:
    34 0000001D 89CB                                mov ebx, ecx
    35 0000001F BE00000000                          mov esi, 0
    36                                              do2:
    37 00000024 668B86[0C000000]                        mov ax, [d + esi]
    38 0000002B 668B96[0E000000]                        mov dx, [d + esi + 2]
    39                                                  
    40 00000032 6639D0                                  cmp ax, dx
    41 00000035 770E                                    ja no_swap
    42                                                  
    43 00000037 668996[0C000000]                        mov [d + esi], dx
    44 0000003E 668986[0E000000]                        mov [d + esi + 2], ax
    45                                                  
    46                                                  no_swap:
    47                                                  
    48 00000045 46                                      inc esi
    49 00000046 4B                                      dec ebx
    50 00000047 75DB                                    jnz do2
    51 00000049 E2D2                            loop do
    52                                          
    53                                          ; actualizam sirul initial
    54 0000004B B903000000                      mov ecx, len
    55 00000050 BE00000000                      mov esi, 0 ; contor pentru sirul initial
    56 00000055 BF00000000                      mov edi, 0 ; contor pentru sirul d
    57                                          bucla:
    58 0000005A 668B87[0C000000]                    mov ax, [d + edi]
    59 00000061 668986[00000000]                    mov [sir + esi], ax
    60 00000068 83C604                              add esi, 4
    61 0000006B 83C702                              add edi, 2
    62                                              
    63 0000006E E2EA                            loop bucla
    64                                          
    65                                          final:
    66                                          ; exit(0)
    67 00000070 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000072 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
