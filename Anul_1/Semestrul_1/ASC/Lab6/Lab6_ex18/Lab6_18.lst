     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 7856AB12CDAB561244-         sir DD 12AB5678h, 1256ABCDh, 12344344h 
    13 00000009 433412             
    14                                      len equ ($-sir)/4
    15 0000000C 0000<rept>                  d times len dw 0
    16                                  
    17                                  ; 18. Se da un sir de dublucuvinte. Sa se ordoneze crescator sirul cuvintelor superioare ale acestor dublucuvinte. Cuvintele inferioare raman neschimbate.
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 B903000000                      mov ecx, len
    21 00000005 E36B                            jecxz final
    22                                          
    23                                          ; punem cuvintele superioare in sirul d
    24 00000007 FC                              cld
    25 00000008 BE[00000000]                    mov esi, sir
    26 0000000D BF[0C000000]                    mov edi, d
    27                                          repeta:
    28 00000012 66AD                                lodsw
    29 00000014 66A5                                movsw
    30 00000016 E2FA                            loop repeta
    31                                          
    32                                          ; sortam sirul de cuvinte superioare
    33 00000018 B902000000                      mov ecx, len-1
    34                                          do:
    35 0000001D 89CB                                mov ebx, ecx
    36 0000001F BE00000000                          mov esi, 0
    37                                              do2:
    38 00000024 668B86[0C000000]                        mov ax, [d + esi]
    39 0000002B 668B96[0E000000]                        mov dx, [d + esi + 2]
    40                                                  
    41 00000032 6639D0                                  cmp ax, dx
    42 00000035 720E                                    jb no_swap
    43                                                  
    44 00000037 668996[0C000000]                        mov [d + esi], dx
    45 0000003E 668986[0E000000]                        mov [d + esi + 2], ax
    46                                                  
    47                                                  no_swap:
    48                                                  
    49 00000045 83C602                                  add esi, 2
    50 00000048 4B                                      dec ebx
    51 00000049 75D9                                    jnz do2
    52 0000004B E2D0                            loop do
    53                                          
    54                                          ; actualizam sirul initial
    55 0000004D B903000000                      mov ecx, len
    56 00000052 BE02000000                      mov esi, 2 ; contor pentru sirul s
    57 00000057 BF00000000                      mov edi, 0 ; contor pentru sirul d
    58                                     
    59                                          bucla:
    60 0000005C 668B87[0C000000]                    mov ax, [d + edi]
    61 00000063 668986[00000000]                    mov [sir + esi], ax
    62                                              
    63 0000006A 83C604                              add esi, 4
    64 0000006D 83C702                              add edi, 2
    65                                              
    66 00000070 E2EA                            loop bucla
    67                                          
    68                                      
    69                                          final:
    70                                          ; exit(0)
    71 00000072 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 00000074 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
