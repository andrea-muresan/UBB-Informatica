     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 EAFF9100D0FF7F00            s dw -22, 145, -48, 127
    14                                      len equ ($-s)/2
    15 00000008 01                          unu db 1
    16 00000009 00<rept>                    d times len db 0
    17                                      
    18                                      
    19                                  
    20                                  ; Se da un sir de cuvinte s. Sa se construiasca sirul de octeti d, astfel incat d sa contina pentru fiecare pozitie din s:
    21                                  ;   - numarul de biti de 0, daca numarul este negativ
    22                                  ;   - numarul de biti de 1, daca numarul este pozitiv
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 B904000000                      mov ecx, len
    26 00000005 E33E                            jecxz final
    27                                          
    28 00000007 FC                              cld
    29 00000008 BE[00000000]                    mov esi, s
    30 0000000D BF[09000000]                    mov edi, d
    31                                          
    32                                          repeta:
    33 00000012 51                                  push ecx
    34                                              
    35 00000013 66AD                                lodsw
    36 00000015 BB00000000                          mov ebx, 0 ; aici conorizam
    37 0000001A B910000000                          mov ecx, 16
    38                                              
    39 0000001F 6683F800                            cmp ax, 0
    40 00000023 7C0E                                jl negativ
    41                                              
    42                                              
    43                                              pozitiv:
    44 00000025 66A90100                                test ax, 0001h
    45 00000029 7401                                    jz .gata
    46                                                  
    47 0000002B 43                                      inc ebx
    48                                                  
    49                                                  .gata:
    50 0000002C 66D1E8                                      shr ax, 1
    51                                                  
    52 0000002F E2F4                                    loop pozitiv
    53 00000031 EB0C                                jmp next
    54                                              negativ:
    55 00000033 66A90100                                test ax, 0001h
    56 00000037 7501                                    jnz .gata
    57                                                  
    58 00000039 43                                      inc ebx
    59                                                  
    60                                                  .gata:
    61 0000003A 66D1E8                                      shr ax, 1
    62                                                  
    63 0000003D E2F4                                    loop negativ
    64                                              
    65                                              next:
    66 0000003F 88D8                                mov al, bl
    67 00000041 AA                                  stosb
    68 00000042 59                                  pop ecx
    69 00000043 E2CD                            loop repeta
    70                                          
    71                                          
    72                                          final:
    73                                          ; exit(0)
    74 00000045 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 00000047 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
