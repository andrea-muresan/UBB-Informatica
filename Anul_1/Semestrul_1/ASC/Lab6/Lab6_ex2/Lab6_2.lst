     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 32147586BCAD                s dw 1432h, 8675h, 0ADBCh
    14                                      len equ ($-s)/2
    15 00000006 00000000<rept>              d times len dd 0
    16                                      
    17 00000012 1000                        zece dw 10h
    18 00000014 <res 00000004>              aux resb 4
    19                                  
    20                                  ; 2. Se da un sir de cuvinte. Sa se obtina din acesta un sir de dublucuvinte, in care fiecare dublucuvant va contine nibble-urile despachetate pe octet (fiecare cifra hexa va fi precedata de un 0), aranjate crescato
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 B903000000                      mov ecx, len
    24 00000005 E366                            jecxz final
    25                                          
    26 00000007 FC                              cld
    27 00000008 BE[00000000]                    mov esi, s
    28 0000000D BF[06000000]                    mov edi, d
    29                                          
    30                                          repeta:
    31 00000012 51                                  push ecx
    32                                              
    33                                              ; punem fiecare cifra hexa in cate un octet in aux
    34 00000013 B904000000                          mov ecx, 4
    35 00000018 BB00000000                          mov ebx, 0
    36 0000001D 66AD                                lodsw
    37                                              bucla:
    38 0000001F 66BA0000                                mov dx, 0
    39 00000023 66F735[12000000]                        div word [zece]
    40 0000002A 668993[14000000]                        mov [aux + ebx], dx
    41 00000031 43                                      inc ebx
    42 00000032 E2EB                                loop bucla
    43                                              
    44                                              ; sortam aux
    45 00000034 57                                  push edi
    46 00000035 B903000000                          mov ecx, 3
    47                                              do:
    48 0000003A 89CB                                    mov ebx, ecx
    49 0000003C BF00000000                              mov edi, 0
    50                                                  do2:
    51 00000041 8A87[14000000]                              mov al, [aux + edi]
    52 00000047 8A97[15000000]                              mov dl, [aux + edi + 1]
    53                                                      
    54 0000004D 38D0                                        cmp al, dl
    55 0000004F 7C0C                                        jl no_swap
    56                                                      
    57 00000051 8897[14000000]                              mov [aux + edi], dl
    58 00000057 8887[15000000]                              mov [aux + edi + 1], al
    59                                                      
    60                                                      no_swap:
    61                                                      
    62 0000005D 47                                          inc edi
    63 0000005E 4B                                          dec ebx
    64 0000005F 75E0                                        jnz do2
    65                                                          
    66 00000061 E2D7                                loop do
    67 00000063 5F                                  pop edi
    68 00000064 A1[14000000]                        mov eax, [aux]
    69 00000069 AB                                  stosd
    70                                  
    71 0000006A 59                                  pop ecx
    72 0000006B E2A5                            loop repeta
    73                                          
    74                                          
    75                                          final:
    76                                          ; exit(0)
    77 0000006D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    78 0000006F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
