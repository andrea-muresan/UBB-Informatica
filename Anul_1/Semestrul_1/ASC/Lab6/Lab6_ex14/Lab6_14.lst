     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; 14. Se da un sir S de dublucuvinte.
    12                                  ; Sa se obtina sirul D format din octetii dublucuvintelor din sirul D sortati in ordine crescatoare in interpretarea fara semn.
    13                                  segment data use32 class=data
    14 00000000 07563412153C2B1AFF-         s DD 12345607h, 1A2B3C15h, -1
    14 00000009 FFFFFF             
    15                                      len equ $-s
    16 0000000C 00<rept>                    d times len db 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 B90C000000                      mov ecx, len
    22 00000005 E341                            jecxz final
    23                                          
    24 00000007 FC                              cld
    25 00000008 BE[00000000]                    mov esi, s
    26 0000000D BF[0C000000]                    mov edi, d 
    27                                          
    28 00000012 A4<rept>                        times len movsb
    29                                          
    30                                          ; sortare
    31                                          
    32 0000001E 49                              dec ecx
    33                                          do:
    34 0000001F 89CB                                mov ebx, ecx
    35 00000021 BE00000000                          mov esi, 0
    36                                              do2:
    37 00000026 8A86[0C000000]                          mov al, [d + esi]
    38 0000002C 8A96[0D000000]                          mov dl, [d + esi + 1]
    39                                                  
    40 00000032 38D0                                    cmp al, dl
    41 00000034 7C0C                                    jl no_swap
    42                                                  
    43 00000036 8896[0C000000]                          mov [d + esi], dl
    44 0000003C 8886[0D000000]                          mov [d + esi + 1], al
    45                                                  
    46                                                  no_swap:
    47                                                  
    48 00000042 46                                      inc esi
    49 00000043 4B                                      dec ebx
    50 00000044 75E0                                    jnz do2
    51                                                  
    52 00000046 E2D7                            loop do
    53                                          final:
    54                                          ; exit(0)
    55 00000048 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 0000004A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
