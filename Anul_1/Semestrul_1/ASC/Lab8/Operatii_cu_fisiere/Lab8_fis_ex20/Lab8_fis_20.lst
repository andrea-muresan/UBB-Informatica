     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, printf, fprintf
     8                                  import exit msvcrt.dll    
     9                                  import fopen msvcrt.dll    
    10                                  import fclose msvcrt.dll    
    11                                  import printf msvcrt.dll    
    12                                  import fprintf msvcrt.dll    
    13                                  
    14                                  
    15                                  segment data use32 class=data
    16 00000000 6669736965722E7478-         nume_fisier db "fisier.txt", 0
    16 00000009 7400               
    17 0000000B 7700                        mod_acces db "w", 0
    18 0000000D FFFFFFFF                    descriptor dd -1
    19                                      
    20 00000011 616E6120617265206D-         text db "ana are mult mere", 0
    20 0000001A 756C74206D65726500 
    21                                      len equ $ - text
    22 00000023 00<rept>                    text_final times 2 * len db 0
    23 00000047 0A                          zece db 10
    24                                      
    25 00000048 00000000                    nr dd 0
    26                                      
    27 0000004C 257300                      format_afis db "%s", 0
    28                                      
    29 0000004F 446573636869646572-         eroare db "Deschiderea fisierului a esuat", 0
    29 00000058 656120666973696572-
    29 00000061 756C75692061206573-
    29 0000006A 75617400           
    30                                  
    31                                  ; 20. Se dau un nume de fisier si un text (definite in segmentul de date). Textul contine litere mici si spatii. Sa se inlocuiasca toate literele de pe pozitii pare cu numarul pozitiei. Sa se creeze un fisier cu num
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; fopen(nume_fisier, mod_acces)
    35 00000000 68[0B000000]                    push dword mod_acces
    36 00000005 68[00000000]                    push dword nume_fisier
    37 0000000A FF15[00000000]                  call [fopen]
    38 00000010 83C408                          add esp, 4*2
    39                                          
    40 00000013 83F800                          cmp eax, 0
    41 00000016 0F8498000000                    je eroare_deschidere
    42                                          
    43 0000001C A3[0D000000]                    mov [descriptor], eax
    44                                          
    45                                          
    46 00000021 FC                              cld
    47 00000022 BE[11000000]                    mov esi, text
    48 00000027 BF00000000                      mov edi, 0
    49                                          
    50 0000002C B300                            mov bl, 0
    51 0000002E B912000000                      mov ecx, len
    52                                          repeta:
    53 00000033 F6C301                              test bl, 01h
    54 00000036 740A                                jz par
    55                                              
    56                                              impar:
    57 00000038 AC                                      lodsb
    58 00000039 8887[23000000]                          mov [text_final + edi], al
    59 0000003F 47                                      inc edi
    60 00000040 EB44                                    jmp next
    61                                              par:
    62 00000042 AC                                      lodsb
    63 00000043 3C61                                    cmp al, 'a'
    64 00000045 7C38                                    jl pas
    65                                                  
    66 00000047 3C7A                                    cmp al, 'z'
    67 00000049 7F34                                    jg pas
    68                                                  
    69 0000004B 88D8                                    mov al, bl
    70                                                  
    71 0000004D BA00000000                              mov edx, 0
    72                                                  bucla: 
    73 00000052 B400                                        mov ah, 0
    74 00000054 F635[47000000]                              div byte [zece]
    75 0000005A 80C430                                      add ah, '0'
    76                                                                          
    77                                                      ;mov [text_final + edi], ah
    78                                                      ;inc edi
    79 0000005D 88A2[48000000]                              mov [nr + edx], ah
    80 00000063 42                                          inc edx
    81                                                      
    82 00000064 3C00                                        cmp al, 0
    83 00000066 7402                                        je afara
    84                                                      
    85 00000068 EBE8                                        jmp bucla
    86                                                      
    87                                                  afara:
    88 0000006A 51                                          push ecx
    89                                                      
    90 0000006B 89D1                                        mov ecx, edx
    91                                                      bucla2:
    92 0000006D 8A91[47000000]                                  mov dl, byte [nr + ecx - 1]
    93 00000073 8897[23000000]                                  mov [text_final + edi], dl
    94 00000079 47                                              inc edi
    95 0000007A E2F1                                        loop bucla2
    96                                                      
    97 0000007C 59                                          pop ecx
    98                                                      
    99 0000007D EB07                                    jmp next
   100                                                  pas:
   101 0000007F 8887[23000000]                              mov [text_final + edi], al
   102 00000085 47                                          inc edi
   103                                                  
   104                                                  
   105                                              next:
   106 00000086 FEC3                                    inc bl
   107                                              
   108 00000088 E2A9                                loop repeta
   109                                                  
   110                                                  
   111                                              
   112                                          
   113                                          ; fprintf(descriptor, format_afis, text)
   114 0000008A 68[23000000]                    push dword text_final
   115 0000008F 68[4C000000]                    push dword format_afis
   116 00000094 FF35[0D000000]                  push dword [descriptor]
   117 0000009A FF15[00000000]                  call [fprintf]
   118 000000A0 83C40C                          add esp, 4*3
   119                                          
   120                                          ; fclose(descriptor)
   121 000000A3 FF35[0D000000]                  push dword [descriptor]
   122 000000A9 FF15[00000000]                  call [fclose]
   123 000000AF 83C404                          add esp, 4
   124                                          
   125 000000B2 EB0E                            jmp final
   126                                          eroare_deschidere:
   127 000000B4 68[4F000000]                        push dword eroare
   128 000000B9 FF15[00000000]                      call [printf]
   129 000000BF 83C404                              add esp, 4
   130                                          
   131                                          final:
   132                                          ; exit(0)
   133 000000C2 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   134 000000C4 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
