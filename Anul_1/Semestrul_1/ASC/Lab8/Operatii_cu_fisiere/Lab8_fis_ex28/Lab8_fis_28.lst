     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fprintf, fopen, fclose, printf
     8                                  
     9                                  import exit msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  
    16                                  
    17                                  segment data use32 class=data
    18 00000000 6669736965722E7478-         nume_fisier db "fisier.txt", 0
    18 00000009 7400               
    19 0000000B 7700                        mod_acces db "w", 0
    20 0000000D FFFFFFFF                    descriptor dd -1
    21                                      
    22 00000011 00<rept>                    n times 50 db 0
    23                                      
    24                                      
    25 00000043 257300                      format db "%s", 0
    26 00000046 25732000                    format_afis db "%s ", 0
    27                                      
    28 0000004A 446573636869646572-         eroare db "Deschiderea fisierului a esuat", 0
    28 00000053 656120666973696572-
    28 0000005C 756C75692061206573-
    28 00000065 75617400           
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; fopen(nume_fisier, mod_acces)
    34 00000000 68[0B000000]                    push dword mod_acces
    35 00000005 68[00000000]                    push dword nume_fisier
    36 0000000A FF15[00000000]                  call [fopen]
    37 00000010 83C408                          add esp, 4*2
    38                                          
    39 00000013 83F800                          cmp eax, 0
    40 00000016 7476                            je eroare_deschidere
    41                                          
    42 00000018 A3[0D000000]                    mov [descriptor], eax
    43                                          
    44                                          
    45                                          repeta:
    46                                              ; scanf(format, val)
    47 0000001D 68[11000000]                        push dword n
    48 00000022 68[43000000]                        push dword format
    49 00000027 FF15[00000000]                      call [scanf]
    50 0000002D 83C408                              add esp, 4*2
    51                                              
    52 00000030 B024                                mov al, '$'
    53 00000032 3A05[11000000]                      cmp al, [n]
    54 00000038 7443                                je gata
    55                                              
    56 0000003A BE[11000000]                        mov esi, n
    57 0000003F B92D000000                          mov ecx, 45
    58                                              bucla:
    59 00000044 AC                                      lodsb
    60 00000045 3C61                                    cmp al, 'a'
    61 00000047 7C06                                    jl next
    62                                                  
    63 00000049 3C7A                                    cmp al, 'z'
    64 0000004B 7F02                                    jg next
    65                                                  
    66 0000004D EB04                                    jmp printeaza
    67                                                  
    68                                                  next:
    69                                                  
    70 0000004F E2F3                                loop bucla
    71                                              
    72 00000051 EB19                                jmp clear
    73                                              printeaza:
    74                                                  ; fprintf(descriptor, format, val)
    75 00000053 68[11000000]                            push dword n
    76 00000058 68[46000000]                            push dword format_afis
    77 0000005D FF35[0D000000]                          push dword [descriptor]
    78 00000063 FF15[00000000]                          call [fprintf]
    79 00000069 83C40C                                  add esp, 4*3
    80                                                  
    81                                              clear:
    82 0000006C BF[11000000]                            mov edi, n
    83 00000071 B92D000000                              mov ecx, 45
    84                                                  .do:
    85 00000076 B000                                        mov al, 0
    86 00000078 AA                                          stosb
    87 00000079 E2FB                                    loop .do
    88                                              
    89 0000007B EBA0                                jmp repeta
    90                                          
    91                                          
    92                                          gata:
    93                                          
    94                                          ; fclose(descriptor)
    95 0000007D FF35[0D000000]                  push dword [descriptor]
    96 00000083 FF15[00000000]                  call [fclose]
    97 00000089 83C404                          add esp, 4
    98                                          
    99 0000008C EB0E                            jmp final
   100                                          eroare_deschidere:
   101 0000008E 68[4A000000]                        push dword eroare
   102 00000093 FF15[00000000]                      call [printf]
   103 00000099 83C404                              add esp, 4
   104                                              
   105                                          final:
   106                                          ; exit(0)
   107 0000009C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   108 0000009E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
