     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                   
    12                                  segment data use32 class=data
    13 00000000 00000000                    n dd 0
    14                                      
    15 00000004 4E756D61723A2000            mesajn db "Numar: ", 0
    16 0000000C 4D6178696D756C2065-         format_afis db "Maximul este %d", 0
    16 00000015 73746520256400     
    17 0000001C 256400                      format db "%d", 0
    18                                  
    19                                  ; 28. Se citesc de la tastatura numere (in baza 10) pana cand se introduce cifra 0. Determinaţi şi afişaţi cel mai mare număr dintre cele citite.
    20                                  segment code use32 class=code
    21                                      start:
    22                                  
    23 00000000 BBFFFFFFFF                      mov ebx, 0FFFF_FFFFh ; maximul
    24                                          repeta:
    25                                              ; citire
    26 00000005 68[04000000]                        push dword mesajn
    27 0000000A FF15[00000000]                      call [printf]
    28 00000010 83C404                              add esp, 4*1
    29                                              
    30 00000013 68[00000000]                        push dword n
    31 00000018 68[1C000000]                        push dword format
    32 0000001D FF15[00000000]                      call [scanf]
    33 00000023 83C408                              add esp, 4*2
    34                                              
    35                                              ; verificam daca e 0
    36 00000026 A1[00000000]                        mov eax, [n]
    37 0000002B 83F800                              cmp eax, 0
    38 0000002E 7408                                je afara
    39                                              
    40                                              ; comparam
    41 00000030 39C3                                cmp ebx, eax
    42 00000032 7F02                                jg gata
    43                                              
    44 00000034 89C3                                mov ebx, eax
    45                                              
    46                                              gata:
    47 00000036 EBCD                                jmp repeta
    48                                          
    49                                          afara:
    50                                          
    51                                          ; afisare
    52 00000038 53                              push dword ebx
    53 00000039 68[0C000000]                    push dword format_afis
    54 0000003E FF15[00000000]                  call [printf]
    55 00000044 83C408                          add esp, 4*2
    56                                      
    57                                          ; exit(0)
    58 00000047 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 00000049 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
