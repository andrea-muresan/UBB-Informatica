     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf      
     8                                  import exit msvcrt.dll    
     9                                  import printf msvcrt.dll    
    10                                  import scanf msvcrt.dll   
    11                                   
    12                                  segment data use32 class=data
    13 00000000 0000                        a dw 0
    14 00000002 0000                        b dw 0
    15                                      
    16 00000004 61203D2000                  mesaja db "a = ", 0
    17 00000009 62203D2000                  mesajb db "b = ", 0
    18 0000000E 256400                      format db "%d", 0
    19 00000011 436174203D2025642C-         format_afis db "Cat = %d, rest = %d", 0
    19 0000001A 2072657374203D2025-
    19 00000023 6400               
    20                                      
    21                                      
    22                                  
    23                                  ; 5. Se dau doua numere naturale a si b (a, b: word, definite in segmentul de date). Sa se calculeze a/b si sa se afiseze catul si restul impartirii in urmatorul format: "Cat = <cat>, rest = <rest>"
    24                                  ; Exemplu: pentru a=23 si b=10 se va afisa: "Cat = 2, rest = 3"
    25                                  ; Valorile vor fi afisate in format decimal (baza 10) cu semn.
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; a
    29 00000000 68[04000000]                    push dword mesaja
    30 00000005 FF15[00000000]                  call [printf]
    31 0000000B 83C404                          add esp, 4*1
    32                                          
    33 0000000E 68[00000000]                    push dword a
    34 00000013 68[0E000000]                    push dword format
    35 00000018 FF15[00000000]                  call [scanf]
    36 0000001E 83C408                          add esp, 4*2
    37                                          
    38                                          ; b
    39 00000021 68[09000000]                    push dword mesajb
    40 00000026 FF15[00000000]                  call [printf]
    41 0000002C 83C404                          add esp, 4*1
    42                                          
    43 0000002F 68[02000000]                    push dword b
    44 00000034 68[0E000000]                    push dword format
    45 00000039 FF15[00000000]                  call [scanf]
    46 0000003F 83C408                          add esp, 4*2
    47                                          
    48 00000042 BA00000000                      mov edx, 0
    49                                          ; impartire
    50 00000047 66A1[00000000]                  mov ax, [a]
    51 0000004D 6699                            cwd
    52 0000004F 668B1D[02000000]                mov bx, [b]
    53                                          
    54 00000056 66F7FB                          idiv word bx
    55                                          
    56 00000059 98                              cwde
    57                                          
    58 0000005A 89C1                            mov ecx, eax ; catul
    59                                          
    60 0000005C 6689D0                          mov ax, dx
    61 0000005F 6699                            cwd ; restul e in eax
    62                                          
    63                                          ; printf % , cat, rest
    64 00000061 50                              push dword eax
    65 00000062 51                              push dword ecx
    66 00000063 68[11000000]                    push dword format_afis
    67 00000068 FF15[00000000]                  call [printf]
    68 0000006E 83C40C                          add esp, 4*3
    69                                      
    70                                          ; exit(0)
    71 00000071 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 00000073 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
