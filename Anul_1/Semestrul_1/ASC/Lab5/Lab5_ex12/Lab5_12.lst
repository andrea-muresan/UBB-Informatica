     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  segment data use32 class=data
    12 00000000 616263646566                s1 db 'a', 'b', 'c', 'd', 'e', 'f'
    13                                      l_s1 equ $-s1
    14 00000006 3132333435                  s2 db '1', '2', '3', '4', '5'
    15                                      l_s2 equ $-s2
    16                                      
    17                                      len equ (l_s1 + 1)/2 + l_s2/2
    18 0000000B 00<rept>                    d times len db 0
    19                                  
    20                                  ; Se dau doua siruri de caractere S1 si S2. Sa se construiasca sirul D prin concatenarea elementelor de pe pozitiile pare din S2 cu elementele de pe pozitiile impare din S1.
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 B905000000                      mov ecx, len
    24 00000005 E34A                            jecxz final
    25                                          
    26 00000007 BF00000000                      mov edi, 0 ; contor sir destinatie
    27                                          
    28                                          ; sirul 2
    29 0000000C B905000000                      mov ecx, l_s2
    30 00000011 83F902                          cmp ecx, 2
    31 00000014 7C1A                            jl next
    32                                          
    33 00000016 49                              dec ecx
    34                                         
    35 00000017 BE01000000                      mov esi, 1
    36                                          repeta:
    37 0000001C 8A86[06000000]                      mov al, [s2 + esi]
    38 00000022 8887[0B000000]                      mov [d + edi], al
    39 00000028 47                                  inc edi
    40 00000029 83C602                              add esi, 2 
    41                                              
    42 0000002C 39CE                                cmp esi, ecx
    43 0000002E 7EEC                                jle repeta
    44                                              
    45                                          next: ; sirul 1
    46 00000030 B906000000                      mov ecx, l_s1
    47 00000035 E31A                            jecxz final
    48                                          
    49 00000037 49                              dec ecx
    50                                          
    51 00000038 BE00000000                      mov esi, 0
    52                                          repeta2:
    53 0000003D 8A86[00000000]                      mov al, [s1 + esi]
    54 00000043 8887[0B000000]                      mov [d + edi], al
    55 00000049 47                                  inc edi
    56 0000004A 83C602                              add esi, 2
    57                                              
    58 0000004D 39CE                                cmp esi, ecx
    59 0000004F 7EEC                                jle repeta2
    60                                          
    61                                          final:
    62                                          ; exit(0)
    63 00000051 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 00000053 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
