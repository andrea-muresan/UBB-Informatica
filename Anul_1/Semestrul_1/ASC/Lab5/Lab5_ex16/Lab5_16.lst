     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 616263626566                s1 db 'a', 'b', 'c', 'b', 'e', 'f'
    14                                      l_s1 equ $-s1
    15 00000006 3132333435                  s2 db '1', '2', '3', '4', '5'
    16                                      l_s2 equ $-s2
    17                                      len equ (l_s2+1)/2 + l_s1/2
    18 0000000B 00<rept>                    d times len db 0
    19                                  
    20                                  ; Se dau doua siruri de caractere S1 si S2. Sa se construiasca sirul D prin concatenarea elementelor de pe pozitiile impare din S2 cu elementele de pe pozitiile pare din S1.
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 BF00000000                      mov edi, 0
    24                                          
    25                                          ; s2
    26 00000005 B905000000                      mov ecx, l_s2
    27 0000000A E31A                            jecxz next
    28                                          
    29 0000000C 49                              dec ecx
    30                                          
    31 0000000D BE00000000                      mov esi, 0
    32                                          repeta:
    33 00000012 8A86[06000000]                      mov al, [s2 + esi]
    34 00000018 8887[0B000000]                      mov [d + edi], al
    35 0000001E 47                                  inc edi
    36                                              
    37 0000001F 83C602                              add esi, 2
    38 00000022 39CE                                cmp esi, ecx
    39 00000024 7EEC                                jle repeta
    40                                          
    41                                          next:
    42                                          ; s1
    43 00000026 B906000000                      mov ecx, l_s1
    44 0000002B E3F9                            jecxz next
    45                                          
    46 0000002D 49                              dec ecx
    47                                          
    48 0000002E BE01000000                      mov esi, 1
    49                                          repeta2:
    50 00000033 8A86[00000000]                      mov al, [s1 + esi]
    51 00000039 8887[0B000000]                      mov [d + edi], al
    52 0000003F 47                                  inc edi
    53                                              
    54 00000040 83C602                              add esi, 2
    55 00000043 39CE                                cmp esi, ecx
    56 00000045 7EEC                                jle repeta2
    57                                          
    58                                          final:
    59                                          ; exit(0)
    60 00000047 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000049 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
