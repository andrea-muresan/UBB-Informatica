     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 02010303040206              a db 2, 1, 3, 3, 4, 2, 6
    14                                      l_a equ $-a
    15 00000007 040507060201                b db 4, 5, 7, 6, 2, 1
    16                                      l_b equ $-b
    17                                      len equ $-a
    18 0000000D 00<rept>                    d times len db 0
    19                                  
    20                                  ; Se dau 2 siruri de octeti A si B. Sa se construiasca sirul R care sa contina elementele lui B in ordine inversa urmate de elementele impare ale lui A.
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 BF00000000                      mov edi, 0
    24                                          
    25 00000005 B906000000                      mov ecx, l_b
    26 0000000A E30F                            jecxz next
    27                                          
    28                                          repeta: ; sirul b
    29 0000000C 8A81[06000000]                      mov al, [b + ecx - 1]
    30 00000012 8887[0D000000]                      mov [d + edi], al
    31 00000018 47                                  inc edi
    32 00000019 E2F1                            loop repeta
    33                                              
    34                                          next: ; sirul al
    35 0000001B B907000000                      mov ecx, l_a
    36 00000020 E319                            jecxz final
    37                                          
    38 00000022 BE00000000                      mov esi, 0
    39                                          repeta2:
    40 00000027 8A86[00000000]                      mov al, [a + esi]
    41 0000002D A801                                test al, 01h
    42 0000002F 7407                                jz gata
    43                                              
    44                                              impar:
    45 00000031 8887[0D000000]                          mov [d + edi], al
    46 00000037 47                                      inc edi
    47                                              
    48                                              gata:
    49 00000038 46                                      inc esi
    50 00000039 E2EC                            loop repeta2
    51                                          
    52                                      
    53                                          final:
    54                                          ; exit(0)
    55 0000003B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 0000003D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
