     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0103FEFB03F80500            s db 1, 3, -2, -5, 3, -8, 5, 0
    14                                      len equ $-s
    15 00000008 00<rept>                    d1 times len db 0
    16 00000010 00<rept>                    d2 times len db 0
    17                                  
    18                                  ; Se da un sir de octeti S. Sa se construiasca un sir D1 care sa contina toate numerele pozitive si un sir D2 care sa contina toate numerele negative din S.
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 B908000000                      mov ecx, len
    22 00000005 E32C                            jecxz final
    23                                          
    24 00000007 BE00000000                      mov esi, 0 ; contor s
    25 0000000C BB00000000                      mov ebx, 0 ; contor d1
    26 00000011 BA00000000                      mov edx, 0 ; contor d2
    27                                          
    28                                          repeta:
    29 00000016 8A86[00000000]                      mov al, [s + esi]
    30 0000001C 3C00                                cmp al, 0
    31 0000001E 7C09                                jl negativ
    32                                              
    33                                              pozitiv:
    34 00000020 8883[08000000]                          mov [d1 + ebx], al
    35 00000026 43                                      inc ebx
    36 00000027 EB07                                    jmp gata
    37                                              negativ:
    38 00000029 8882[10000000]                          mov [d2 + edx], al
    39 0000002F 42                                      inc edx
    40                                              gata:
    41 00000030 46                                      inc esi
    42 00000031 E2E3                            loop repeta
    43                                      
    44                                          final:
    45                                          ; exit(0)
    46 00000033 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000035 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
