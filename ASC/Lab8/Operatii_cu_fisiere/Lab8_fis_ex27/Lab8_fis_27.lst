     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  extern exit, fopen, fclose, fscanf, fprintf, printf
     7                                  import exit msvcrt.dll 
     8                                  import fopen msvcrt.dll 
     9                                  import fclose msvcrt.dll 
    10                                  import fscanf msvcrt.dll 
    11                                  import fprintf msvcrt.dll 
    12                                  import printf msvcrt.dll 
    13                                     
    14                                  segment data use32 class=data
    15 00000000 6669736965722E7478-         nume_fisier db "fisier.txt", 0
    15 00000009 7400               
    16 0000000B 612B00                      mod_acces db "a+", 0
    17 0000000E FFFFFFFF                    descriptor dd -1
    18                                      
    19 00000012 00000000                    n dd 0
    20                                      
    21 00000016 256400                      format_cit db "%d", 0
    22 00000019 20256400                    format_afis db " %d", 0
    23                                      
    24 0000001D 446573636869646572-         eroare db "Deschiderea fisierului a esuat", 0
    24 00000026 656120666973696572-
    24 0000002F 756C75692061206573-
    24 00000038 75617400           
    25                                  
    26                                  ; 27. Se da un fisier text. Fisierul contine numere (in baza 10) separate prin spatii. Sa se citeasca continutul acestui fisier, sa se determine minimul numerelor citite si sa se scrie rezultatul la sfarsitul fisier
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; fopen(nume_fisier, mod_acces)
    30 00000000 68[0B000000]                    push dword mod_acces
    31 00000005 68[00000000]                    push dword nume_fisier
    32 0000000A FF15[00000000]                  call [fopen]
    33 00000010 83C408                          add esp, 4*2
    34                                          
    35 00000013 83F800                          cmp eax, 0
    36 00000016 747D                            je eroare_deschidere
    37                                          
    38 00000018 A3[0E000000]                    mov [descriptor], eax
    39                                          
    40                                          ; citim primul numar si il consieram maxim
    41                                          ; fscanf(descriptor, format_cit, n)
    42 0000001D 68[12000000]                    push dword n
    43 00000022 68[16000000]                    push dword format_cit
    44 00000027 FF35[0E000000]                  push dword [descriptor]
    45 0000002D FF15[00000000]                  call [fscanf]
    46 00000033 83C40C                          add esp, 4*3
    47                                          
    48 00000036 83F801                          cmp eax, 1
    49 00000039 7568                            jne final
    50                                          
    51 0000003B 8B1D[12000000]                  mov ebx, [n] ; il consideram maxim
    52                                          
    53                                          repeta:
    54                                              ; fscanf(descriptor, format_cit, n)
    55 00000041 68[12000000]                        push dword n
    56 00000046 68[16000000]                        push dword format_cit
    57 0000004B FF35[0E000000]                      push dword [descriptor]
    58 00000051 FF15[00000000]                      call [fscanf]
    59 00000057 83C40C                              add esp, 4*3
    60                                              
    61 0000005A 83F801                              cmp eax, 1
    62 0000005D 7510                                jne afisare
    63                                              
    64 0000005F 3B1D[12000000]                      cmp ebx, [n]
    65 00000065 7C06                                jl next
    66                                              
    67 00000067 8B1D[12000000]                      mov ebx, [n]
    68                                              
    69                                              next:
    70 0000006D EBD2                                    jmp repeta
    71                                                  
    72                                          afisare:
    73                                              ; fprintf(descriptor, format_afis, ebx)
    74 0000006F 53                                  push ebx
    75 00000070 68[19000000]                        push dword format_afis
    76 00000075 FF35[0E000000]                      push dword [descriptor]
    77 0000007B FF15[00000000]                      call [fprintf]
    78 00000081 83C40C                              add esp, 4*3
    79                                          
    80                                          ; fclose(descriptor)
    81 00000084 FF35[0E000000]                  push dword [descriptor]
    82 0000008A FF15[00000000]                  call [fclose]
    83 00000090 83C404                          add esp, 4
    84                                          
    85 00000093 EB0E                            jmp final
    86                                          eroare_deschidere:
    87 00000095 68[1D000000]                        push dword eroare
    88 0000009A FF15[00000000]                      call [printf]
    89 000000A0 83C404                              add esp, 4
    90                                              
    91                                          final:
    92                                          ; exit(0)
    93 000000A3 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    94 000000A5 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
