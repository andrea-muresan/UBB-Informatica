     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fread, printf, fclose
     8                                  import exit msvcrt.dll 
     9                                  import fopen msvcrt.dll    
    10                                  import fclose msvcrt.dll    
    11                                  import fread msvcrt.dll    
    12                                  import printf msvcrt.dll    
    13                                   
    14                                    
    15                                  segment data use32 class=data
    16 00000000 6669736965722E7478-         nume_fisier db "fisier.txt", 0
    16 00000009 7400               
    17 0000000B 7200                        mod_acces db "r", 0
    18 0000000D FFFFFFFF                    descriptor dd -1
    19                                      
    20 00000011 00                          buffer db 0
    21                                      
    22 00000012 00                          nr_consoane_citite db 0
    23 00000013 4145494F556165696F-         vocale db "AEIOUaeiou", 0
    23 0000001C 7500               
    24                                      
    25 0000001E 256420636F6E736F61-         format_afis db "%d consoane", 0
    25 00000027 6E6500             
    26 0000002A 446573636869646572-         eroare db "Deschiderea fisierului a esuat", 0
    26 00000033 656120666973696572-
    26 0000003C 756C75692061206573-
    26 00000045 75617400           
    27                                  
    28                                  ; 2. Se da un fisier text. Sa se citeasca continutul fisierului, sa se contorizeze numarul de consoane si sa se afiseze aceasta valoare. Numele fisierului text este definit in segmentul de date.
    29                                  segment code use32 class=code
    30                                      start:
    31 00000000 BB00000000                      mov ebx, 0 ; contorizam consoanele
    32                                          
    33                                          ; fopen(nume_fisier, mod_acces)
    34 00000005 68[0B000000]                    push dword mod_acces
    35 0000000A 68[00000000]                    push dword nume_fisier
    36 0000000F FF15[00000000]                  call [fopen]
    37 00000015 83C408                          add esp, 4*2
    38                                          
    39                                          ; verificam daca fisierul a fost deschis cu succes
    40 00000018 83F800                          cmp eax, 0
    41 0000001B 747B                            je eroare_fisier
    42                                          
    43 0000001D A3[0D000000]                    mov [descriptor], eax
    44                                          
    45                                          repeta:
    46                                              ; fread(buffer, size, count, descriptor)
    47 00000022 FF35[0D000000]                      push dword [descriptor]
    48 00000028 6A01                                push dword 1
    49 0000002A 6A01                                push dword 1
    50 0000002C 68[11000000]                        push dword buffer
    51 00000031 FF15[00000000]                      call [fread]
    52 00000037 83C410                              add esp, 4*4
    53                                              
    54 0000003A 83F800                              cmp eax, 0
    55 0000003D 7439                                je afisare
    56                                              
    57 0000003F A0[11000000]                        mov al, [buffer]
    58                                              litera_mica:
    59 00000044 3C61                                    cmp al, 'a'
    60 00000046 7C16                                    jl litera_mare
    61                                                  
    62 00000048 3C7A                                    cmp al, 'z'
    63 0000004A 7F12                                    jg litera_mare
    64                                                  
    65                                                  ; verifica daca e vocala
    66 0000004C B90A000000                              mov ecx, 10
    67 00000051 BF[13000000]                            mov edi, vocale
    68                                                  .cauta:
    69 00000056 AE                                          scasb
    70 00000057 741D                                        je next
    71 00000059 E2FB                                    loop .cauta
    72                                                  
    73 0000005B 43                                      inc ebx
    74 0000005C EB18                                    jmp next
    75                                              
    76                                              litera_mare:
    77 0000005E 3C41                                    cmp al, 'A'
    78 00000060 7C14                                    jl next
    79                                                  
    80 00000062 3C7A                                    cmp al, 'z'
    81 00000064 7F10                                    jg next
    82                                                  
    83                                                  ; verifica daca e vocala
    84 00000066 B90A000000                              mov ecx, 10
    85 0000006B BF[13000000]                            mov edi, vocale
    86                                                  .cauta:
    87 00000070 AE                                          scasb
    88 00000071 7403                                        je next
    89 00000073 E2FB                                    loop .cauta
    90                                                  
    91 00000075 43                                      inc ebx
    92                                              
    93                                              next:
    94                                              
    95 00000076 EBAA                                jmp repeta
    96                                                  
    97                                          
    98                                          afisare:
    99 00000078 53                                  push dword ebx
   100 00000079 68[1E000000]                        push dword format_afis
   101 0000007E FF15[00000000]                      call [printf]
   102 00000084 83C408                              add esp, 4*2
   103                                              
   104                                          
   105                                          ; fclose(descriptor)
   106 00000087 FF35[0D000000]                  push dword [descriptor]
   107 0000008D FF15[00000000]                  call [fclose]
   108 00000093 83C404                          add esp, 4
   109                                          
   110 00000096 EB0E                            jmp final
   111                                          eroare_fisier:
   112 00000098 68[2A000000]                        push dword eroare
   113 0000009D FF15[00000000]                      call [printf]
   114 000000A3 83C404                              add esp, 4
   115                                           
   116                                          final:
   117                                          ; exit(0)
   118 000000A6 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   119 000000A8 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
