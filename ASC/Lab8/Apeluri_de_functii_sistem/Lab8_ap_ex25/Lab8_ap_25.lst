     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               
     8                                  import exit msvcrt.dll    
     9                                  import scanf msvcrt.dll    
    10                                  import printf msvcrt.dll    
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 00000000                    a dd 0
    14 00000004 00000000                    b dd 0 
    15                                      
    16 00000008 61203D2000                  mesaja db "a = ", 0
    17 0000000D 62203D2000                  mesajb db "b = ", 0
    18 00000012 2564203C20256400            format_a_mic db "%d < %d", 0
    19 0000001A 2564203E20256400            format_a_mare db "%d > %d", 0
    20 00000022 2564203D20256400            format_egalitate db "%d = %d", 0
    21 0000002A 256400                      format db "%d", 0
    22                                      
    23                                  
    24                                  ; 25. Sa se citeasca de la tastatura doua numere a si b (in baza 10) şi să se determine relaţia de ordine dintre ele (a < b, a = b sau a > b). Afisati rezultatul în următorul format: "<a> < <b>, <a> = <b> sau <
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; a
    28 00000000 68[08000000]                    push dword mesaja
    29 00000005 FF15[00000000]                  call [printf]
    30 0000000B 83C404                          add esp, 4*1
    31                                          
    32 0000000E 68[00000000]                    push dword a
    33 00000013 68[2A000000]                    push dword format
    34 00000018 FF15[00000000]                  call [scanf]
    35 0000001E 83C408                          add esp, 4*2
    36                                          
    37                                          ; b
    38 00000021 68[0D000000]                    push dword mesajb
    39 00000026 FF15[00000000]                  call [printf]
    40 0000002C 83C404                          add esp, 4*1
    41                                          
    42 0000002F 68[04000000]                    push dword b
    43 00000034 68[2A000000]                    push dword format
    44 00000039 FF15[00000000]                  call [scanf]
    45 0000003F 83C408                          add esp, 4*2
    46                                          
    47                                          ; comparatie
    48 00000042 A1[00000000]                    mov eax, [a]
    49 00000047 8B1D[04000000]                  mov ebx, [b]
    50                                          
    51 0000004D 39D8                            cmp eax, ebx
    52 0000004F 7420                            je egalitate
    53                                          
    54 00000051 39D8                            cmp eax, ebx
    55 00000053 7C38                            jl a_mai_mic
    56                                          
    57                                          a_mai_mare:
    58 00000055 FF35[04000000]                      push dword [b]
    59 0000005B FF35[00000000]                      push dword [a]
    60 00000061 68[1A000000]                        push format_a_mare
    61 00000066 FF15[00000000]                      call [printf]
    62 0000006C 83C40C                              add esp, 4*3
    63 0000006F EB38                                jmp final
    64                                              
    65                                          egalitate:
    66 00000071 FF35[04000000]                      push dword [b]
    67 00000077 FF35[00000000]                      push dword [a]
    68 0000007D 68[22000000]                        push format_egalitate
    69 00000082 FF15[00000000]                      call [printf]
    70 00000088 83C40C                              add esp, 4*3
    71 0000008B EB1C                                jmp final
    72                                              
    73                                          a_mai_mic:
    74 0000008D FF35[04000000]                      push dword [b]
    75 00000093 FF35[00000000]                      push dword [a]
    76 00000099 68[12000000]                        push format_a_mic
    77 0000009E FF15[00000000]                      call [printf]
    78 000000A4 83C40C                              add esp, 4*3
    79 000000A7 EB00                                jmp final
    80                                      
    81                                          final:
    82                                          ; exit(0)
    83 000000A9 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 000000AB FF15[00000000]                  call    [exit]       ; call exit to terminate the program
