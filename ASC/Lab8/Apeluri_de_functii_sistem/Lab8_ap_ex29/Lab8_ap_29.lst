     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf
     8                                  import exit msvcrt.dll    
     9                                  import printf msvcrt.dll    
    10                                  import scanf msvcrt.dll 
    11                                     
    12                                  segment data use32 class=data
    13 00000000 0000                        a dw 0
    14 00000002 00000000                    m dd 0
    15 00000006 00000000                    n dd 0
    16                                      
    17 0000000A 61203D2000                  mesaja db "a = ", 0
    18 0000000F 6D203D2000                  mesajm db "m = ", 0
    19 00000014 6E203D2000                  mesajn db "n = ", 0
    20 00000019 256400                      format db "%d", 0
    21 0000001C 4E756D6172756C2065-         format_afis db "Numarul este: %d", 0
    21 00000025 7374653A20256400   
    22                                  
    23                                  ; 29. Se citesc de la tastatura trei numere a, m si n (a: word, 0 <= m, n <= 15, m > n). Sa se izoleze bitii de la m-n ai lui a si sa se afiseze numarul intreg reprezentat de acesti bitii in baza 10.
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; a
    27 00000000 68[0A000000]                    push dword mesaja
    28 00000005 FF15[00000000]                  call [printf]
    29 0000000B 83C404                          add esp, 4*1
    30                                          
    31 0000000E 68[00000000]                    push dword a
    32 00000013 68[19000000]                    push dword format
    33 00000018 FF15[00000000]                  call [scanf]
    34 0000001E 83C408                          add esp, 4*2
    35                                          
    36                                          ; m
    37 00000021 68[0F000000]                    push dword mesajm
    38 00000026 FF15[00000000]                  call [printf]
    39 0000002C 83C404                          add esp, 4*1
    40                                          
    41 0000002F 68[02000000]                    push dword m
    42 00000034 68[19000000]                    push dword format
    43 00000039 FF15[00000000]                  call [scanf]
    44 0000003F 83C408                          add esp, 4*2
    45                                          
    46                                          ; n
    47 00000042 68[14000000]                    push dword mesajn
    48 00000047 FF15[00000000]                  call [printf]
    49 0000004D 83C404                          add esp, 4*1
    50                                          
    51 00000050 68[06000000]                    push dword n
    52 00000055 68[19000000]                    push dword format
    53 0000005A FF15[00000000]                  call [scanf]
    54 00000060 83C408                          add esp, 4*2
    55                                          
    56                                          ; izolare
    57 00000063 B900000000                      mov ecx, 0
    58 00000068 66A1[00000000]                  mov ax, [a]
    59 0000006E B10F                            mov cl, 15
    60 00000070 2A0D[02000000]                  sub cl, [m]
    61 00000076 66D3E0                          shl ax, cl
    62                                          
    63 00000079 020D[06000000]                  add cl, [n]
    64 0000007F 66D3E8                          shr ax, cl
    65                                          
    66 00000082 8A0D[06000000]                  mov cl, [n]
    67 00000088 66D3E0                          shl ax, cl
    68                                      
    69                                          ; afisare
    70 0000008B 50                              push dword eax
    71 0000008C 68[1C000000]                    push dword format_afis
    72 00000091 FF15[00000000]                  call [printf]
    73 00000097 83C408                          add esp, 4*2
    74                                          
    75                                          
    76                                          ; exit(0)
    77 0000009A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    78 0000009C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
