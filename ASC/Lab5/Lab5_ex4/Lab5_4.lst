     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     6                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     7                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
     8                                  
     9                                  
    10                                  segment data use32 class=data
    11 00000000 01030304                    s1 db 1, 3, 3, 4
    12                                      len equ $-s1
    13 00000004 05060708                    s2 db 5, 6, 7, 8
    14 00000008 00<rept>                    d times len db 0
    15                                      
    16                                  
    17                                  ; Se dau doua siruri de octeti S1 si S2 de aceeasi lungime. Sa se construiasca sirul D astfel: fiecare element de pe pozitiile pare din D este suma elementelor de pe pozitiile corespunzatoare din S1 si S2, iar fieca
    18                                  segment code use32 class=code
    19                                      start:
    20                                      
    21 00000000 B904000000                      mov ecx, len
    22 00000005 E330                            jecxz final
    23                                          
    24 00000007 BE00000000                      mov esi, 0
    25                                          repeta:
    26 0000000C F7C601000000                        test esi, 0001h;
    27 00000012 740E                                jz par
    28                                              
    29                                              impar:
    30 00000014 8A86[00000000]                          mov al, [s1 + esi]
    31 0000001A 2A86[04000000]                          sub al, [s2 + esi]
    32                                              
    33 00000020 EB0C                                jmp gata
    34                                                  
    35                                              par:
    36 00000022 8A86[00000000]                          mov al, [s1 + esi]
    37 00000028 0286[04000000]                          add al, [s2 + esi]
    38                                              
    39                                              gata:
    40 0000002E 8886[08000000]                          mov [d + esi], al
    41 00000034 46                                      inc esi
    42                                                  
    43                                          
    44 00000035 E2D5                            loop repeta
    45                                          
    46                                          final:
    47                                          ; exit(0)
    48 00000037 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000039 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
