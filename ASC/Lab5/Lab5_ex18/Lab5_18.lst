     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 020103FD                    a db 2, 1, 3, -3
    14                                      l_a equ $-a
    15 00000004 0405FB07                    b db 4, 5, -5, 7
    16                                      l_b equ $-b
    17                                      len equ $-a
    18 00000008 00<rept>                    d times len db 0
    19                                  
    20                                  ; Se dau 2 siruri de octeti A si B. Sa se construiasca sirul R care sa contina doar elementele impare si pozitive din cele 2 siruri.
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 BF00000000                      mov edi, 0
    24                                          
    25                                          ; a
    26 00000005 B904000000                      mov ecx, l_a
    27 0000000A E31D                            jecxz next
    28                                          
    29 0000000C BE00000000                      mov esi, 0
    30                                          repeta:
    31 00000011 8A86[00000000]                      mov al, [a + esi]
    32 00000017 3C00                                cmp al, 0
    33 00000019 7C0B                                jl .gata
    34                                              
    35 0000001B A801                                test al, 01h
    36 0000001D 7407                                jz .gata
    37                                              
    38 0000001F 8887[08000000]                      mov [d + edi], al
    39 00000025 47                                  inc edi
    40                                              
    41                                              .gata:
    42 00000026 46                                      inc esi
    43 00000027 E2E8                                loop repeta
    44                                          
    45                                          next:
    46                                          ; b
    47 00000029 B904000000                      mov ecx, l_b
    48 0000002E E31D                            jecxz final
    49                                          
    50 00000030 BE00000000                      mov esi, 0
    51                                          repeta2:
    52 00000035 8A86[04000000]                      mov al, [b + esi]
    53 0000003B 3C00                                cmp al, 0
    54 0000003D 7C0B                                jl .gata
    55                                              
    56 0000003F A801                                test al, 01h
    57 00000041 7407                                jz .gata
    58                                              
    59 00000043 8887[08000000]                      mov [d + edi], al
    60 00000049 47                                  inc edi
    61                                              
    62                                              .gata:
    63 0000004A 46                                      inc esi
    64 0000004B E2E8                                loop repeta2
    65                                              
    66                                              
    67                                          final:
    68                                          ; exit(0)
    69 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    70 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
