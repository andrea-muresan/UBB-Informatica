     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  segment data use32 class=data
    12 00000000 010503080209                s db 1, 5, 3, 8, 2, 9
    13                                      len equ $-s
    14 00000006 00<rept>                    par times len db 0
    15 0000000C 00<rept>                    impar times len db 0
    16                                  
    17                                  ; Se da un sir de octeti S. Sa se obtina sirul D1 ce contine toate numerele pare din S si sirul D2 ce contine toate numerele impare din S.
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 B906000000                      mov ecx, len
    21 00000005 E32C                            jecxz final
    22                                          
    23 00000007 BE00000000                      mov esi, 0 ; contor pentru sirul dat
    24 0000000C BA00000000                      mov edx, 0 ; contor pentru sirul par
    25 00000011 BB00000000                      mov ebx, 0 ; contor pentru sir impar
    26                                          
    27                                          repeta:
    28 00000016 8A86[00000000]                      mov al, [s + esi]
    29 0000001C A801                                test al, 01h
    30 0000001E 7409                                jz nr_par
    31                                              
    32                                              nr_impar:
    33 00000020 8883[0C000000]                          mov [impar + ebx], al
    34 00000026 43                                      inc ebx
    35 00000027 EB07                                    jmp gata
    36                                              
    37                                              nr_par:
    38 00000029 8882[06000000]                          mov [par + edx], al
    39 0000002F 42                                      inc edx
    40                                              
    41                                              gata:
    42 00000030 46                                      inc esi
    43                                              
    44 00000031 E2E3                            loop repeta
    45                                          
    46                                          final:
    47                                          ; exit(0)
    48 00000033 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000035 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
