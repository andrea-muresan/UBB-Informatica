     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  segment data use32 class=data
    12 00000000 010503080209                s db 1, 5, 3, 8, 2, 9
    13                                      l_s equ $-s
    14                                      l_d1 equ ($-s+1)/2
    15                                      l_d2 equ ($-s)/2
    16 00000006 00<rept>                    d1 times l_d1 db 0
    17 00000009 00<rept>                    d2 times l_d2 db 0
    18                                  
    19                                  ; Se da un sir de octeti S. Sa se construiasca sirul D1 ce contine elementele de pe pozitiile pare din S si sirul D2 ce contine elementele de pe pozitiile impare din S.
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 B903000000                      mov ecx, l_d1
    23 00000005 E320                            jecxz next
    24                                          
    25 00000007 49                              dec ecx
    26 00000008 BE00000000                      mov esi, 0
    27 0000000D BF00000000                      mov edi, 0
    28                                          
    29                                          repeta:
    30 00000012 8A86[00000000]                      mov al, [s + esi]
    31 00000018 8887[06000000]                      mov [d1 + edi], al
    32 0000001E 47                                  inc edi
    33                                              
    34 0000001F 83C602                              add esi, 2
    35 00000022 83FE06                              cmp esi, l_s
    36 00000025 7EEB                                jle repeta
    37                                          
    38                                          next:
    39 00000027 B903000000                      mov ecx, l_d2
    40 0000002C E320                            jecxz final
    41                                          
    42 0000002E 49                              dec ecx
    43 0000002F BE01000000                      mov esi, 1
    44 00000034 BF00000000                      mov edi, 0
    45                                          
    46                                          repeta2:
    47 00000039 8A86[00000000]                      mov al, [s + esi]
    48 0000003F 8887[09000000]                      mov [d2 + edi], al
    49 00000045 47                                  inc edi
    50                                              
    51 00000046 83C602                              add esi, 2
    52 00000049 83FE06                              cmp esi, l_s
    53 0000004C 7EEB                                jle repeta2
    54                                          
    55                                          final:
    56                                          ; exit(0)
    57 0000004E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    58 00000050 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
