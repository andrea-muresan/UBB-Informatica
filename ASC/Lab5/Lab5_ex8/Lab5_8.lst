     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 614162423225784D            s db 'a', 'A', 'b', 'B', '2', '%', 'x', 'M'
    14                                      len equ $-s
    15 00000008 00<rept>                    d times len db 0
    16                                  
    17                                  ; Se da un sir de caractere S. Sa se construiasca sirul D care sa contina toate literele mari din sirul S.
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 B908000000                      mov ecx, len
    21 00000005 E322                            jecxz final
    22                                          
    23 00000007 BE00000000                      mov esi, 0 ; contorul sirului pe care il parcurgem
    24 0000000C BF00000000                      mov edi, 0 ; contorul sirului pe care il cream
    25                                          repeta:
    26 00000011 8A86[00000000]                      mov al, [s + esi]
    27 00000017 3C41                                cmp al, 'A'
    28 00000019 7C0B                                jl gata
    29                                              
    30 0000001B 3C5A                                cmp al, 'Z'
    31 0000001D 7F07                                jg gata
    32                                              
    33 0000001F 8887[08000000]                      mov [d + edi], al
    34 00000025 47                                  inc edi
    35                                              
    36                                              gata:
    37 00000026 46                                      inc esi
    38 00000027 E2E8                            loop repeta
    39                                          
    40                                          final:
    41                                          ; exit(0)
    42 00000029 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 0000002B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
