     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fscanf, printf
     8                                  import exit msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fscanf msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  
    14                                  segment data use32 class=data
    15 00000000 6E756D6572652E7478-         nume_fisier db "numere.txt", 0
    15 00000009 7400               
    16 0000000B 7200                        mod_acces db "r", 0
    17 0000000D FFFFFFFF                    descriptor dd -1
    18                                      
    19 00000011 00000000                    numar dd 0
    20 00000015 00000000<rept>              sir_pare times 30 dd 0
    21 0000008D 00000000<rept>              sir_impare times 30 dd 0
    22                                      
    23 00000105 256400                      format_cit db "%d", 0
    24 00000108 25642000                    format_afis db "%d ", 0
    25 0000010C 0D0A00                      format_enter db 13, 10, 0
    26                                      
    27 0000010F 446573636869646572-         eroare db "Deschiderea fisierul a esuat", 0
    27 00000118 656120666973696572-
    27 00000121 756C20612065737561-
    27 0000012A 7400               
    28                                  
    29                                  ; 6. Se citesc din fisierul numere.txt mai multe numere (pare si impare). Sa se creeze 2 siruri rezultat N si P astfel: N - doar numere impare si P - doar numere pare. Afisati cele 2 siruri rezultate pe ecran.
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; fopen(nume_fisier, mod_acces)
    33 00000000 68[0B000000]                    push dword mod_acces
    34 00000005 68[00000000]                    push dword nume_fisier
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 4*2
    37                                          
    38 00000013 83F800                          cmp eax, 0
    39 00000016 0F84AE000000                    je eroare_deschidere
    40                                          
    41 0000001C A3[0D000000]                    mov [descriptor], eax
    42                                          
    43 00000021 BE00000000                      mov esi, 0 ; pare
    44 00000026 BF00000000                      mov edi, 0 ; impare
    45                                          repeta:
    46                                              ; fscanf(descriptor, format_cit, numar)
    47 0000002B 68[11000000]                        push dword numar
    48 00000030 68[05010000]                        push dword format_cit
    49 00000035 FF35[0D000000]                      push dword [descriptor]
    50 0000003B FF15[00000000]                      call [fscanf]
    51 00000041 83C40C                              add esp, 4*3
    52                                              
    53 00000044 83F801                              cmp eax, 1
    54 00000047 7520                                jne afisare
    55                                              
    56 00000049 8B1D[11000000]                      mov ebx, [numar]
    57 0000004F F7C301000000                        test ebx, 0001h
    58 00000055 7409                                jz par
    59                                              
    60                                              impar:
    61 00000057 899F[8D000000]                          mov [sir_impare + edi], ebx
    62 0000005D 47                                      inc edi
    63 0000005E EB07                                    jmp next
    64                                              par:
    65 00000060 899E[15000000]                          mov [sir_pare + esi], ebx
    66 00000066 46                                      inc esi
    67                                                  
    68                                              next:
    69 00000067 EBC2                                    jmp repeta
    70                                                  
    71                                          afisare:
    72 00000069 FC                                  cld
    73 0000006A 89F1                                mov ecx, esi ; pare
    74 0000006C BE[15000000]                        mov esi, sir_pare
    75                                              bucla:
    76 00000071 51                                      push ecx
    77                                                  
    78 00000072 B800000000                              mov eax, 0
    79 00000077 AC                                      lodsb
    80                                                  ; printf(format_afis, eax)
    81 00000078 50                                      push dword eax
    82 00000079 68[08010000]                            push dword format_afis
    83 0000007E FF15[00000000]                          call [printf]
    84 00000084 83C408                                  add esp, 4*2
    85                                                  
    86 00000087 59                                      pop ecx
    87 00000088 E2E7                                loop bucla
    88                                              
    89 0000008A 68[0C010000]                        push dword format_enter
    90 0000008F FF15[00000000]                      call [printf]
    91 00000095 83C404                              add esp, 4
    92                                              
    93 00000098 FC                                  cld
    94 00000099 89F9                                mov ecx, edi ; impare
    95 0000009B BE[8D000000]                        mov esi, sir_impare
    96                                              bucla2:
    97 000000A0 51                                      push ecx
    98                                                  
    99 000000A1 B800000000                              mov eax, 0
   100 000000A6 AC                                      lodsb
   101                                                  ; printf(format_afis, eax)
   102 000000A7 50                                      push dword eax
   103 000000A8 68[08010000]                            push dword format_afis
   104 000000AD FF15[00000000]                          call [printf]
   105 000000B3 83C408                                  add esp, 4*2
   106                                                  
   107 000000B6 59                                      pop ecx
   108 000000B7 E2E7                                loop bucla2
   109                                          
   110                                          
   111                                          ; fclose(descriptor)
   112 000000B9 FF35[0D000000]                  push dword [descriptor]
   113 000000BF FF15[00000000]                  call [fclose]
   114 000000C5 83C404                          add esp, 4
   115                                          
   116 000000C8 EB0E                            jmp final
   117                                          eroare_deschidere:
   118 000000CA 68[0F010000]                        push dword eroare
   119 000000CF FF15[00000000]                      call [printf]
   120 000000D5 83C404                              add esp, 4
   121                                              
   122                                          final:
   123                                          ; exit(0)
   124 000000D8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   125 000000DA FF15[00000000]                  call    [exit]       ; call exit to terminate the program
