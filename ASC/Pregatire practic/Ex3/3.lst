     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  extern exit, gets, printf, 
     7                                  import exit msvcrt.dll
     8                                  import gets msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  
    11                                  segment data use32 class=data    
    12 00000000 00<rept>                    string times 100 db 0
    13 00000064 00<rept>                    invers times 100 db 0
    14 000000C8 257300                      format_afis db "%s", 0    
    15                                      
    16                                  
    17                                  ; 3. Se citeste o propozitie de la tastatura. Sa se inverseze fiecare cuvant si sa se afiseze pe ecran.
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; gets(string)
    21 00000000 68[00000000]                    push dword string
    22 00000005 FF15[00000000]                  call [gets]
    23 0000000B 83C404                          add esp, 4
    24                                          
    25 0000000E BE00000000                      mov esi, 0
    26                                          repeta:
    27 00000013 B000                                mov al, 0
    28 00000015 3A86[00000000]                      cmp al, byte [string + esi]
    29 0000001B 7403                                je afara
    30                                              
    31 0000001D 46                                  inc esi
    32 0000001E EBF3                                jmp repeta
    33                                              
    34                                          afara:
    35                                          
    36 00000020 B320                            mov bl, ' '
    37 00000022 889E[00000000]                  mov [string + esi], bl
    38                                          
    39 00000028 89F1                            mov ecx, esi
    40 0000002A 89F3                            mov ebx, esi
    41 0000002C BF[64000000]                    mov edi, invers
    42                                          bucla:
    43                                              
    44 00000031 B320                                mov bl, ' '
    45 00000033 3899[FFFFFFFF]                      cmp byte [string + ecx - 1], bl
    46 00000039 7519                                jne next   
    47                                  
    48 0000003B 51                                  push ecx
    49                                              
    50                                              inversare:
    51 0000003C B320                                    mov bl, ' '
    52 0000003E 3899[00000000]                          cmp byte [string + ecx], bl
    53 00000044 740A                                    je gata
    54                                                  
    55 00000046 8A81[00000000]                          mov al, byte [string + ecx]
    56 0000004C AA                                      stosb
    57 0000004D 41                                      inc ecx
    58 0000004E EBEC                                    jmp inversare
    59                                              
    60                                              gata:
    61 00000050 B020                                mov al, ' '
    62 00000052 AA                                  stosb
    63 00000053 59                                  pop ecx
    64                                              
    65                                              next:
    66 00000054 E2DB                            loop bucla
    67                                          
    68 00000056 B900000000                      mov ecx, 0
    69                                          inversare2:
    70 0000005B B320                                    mov bl, ' '
    71 0000005D 3899[00000000]                          cmp byte [string + ecx], bl
    72 00000063 740A                                    je gata2
    73                                                  
    74 00000065 8A81[00000000]                          mov al, byte [string + ecx]
    75 0000006B AA                                      stosb
    76 0000006C 41                                      inc ecx
    77 0000006D EBEC                                    jmp inversare2
    78                                          gata2:
    79 0000006F B020                            mov al, ' ' 
    80 00000071 AA                              stosb
    81                                          
    82 00000072 68[64000000]                    push dword invers
    83 00000077 68[C8000000]                    push dword format_afis
    84 0000007C FF15[00000000]                  call [printf]
    85 00000082 83C408                          add esp, 4*2
    86                                          
    87                                      
    88                                          ; exit(0)
    89 00000085 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    90 00000087 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
